#!/usr/bin/env node
const path = require('path');
const fs = require('fs');
const JavaScriptObfuscator = require('javascript-obfuscator');
const argv = process.argv.splice(2);
if(argv.length==0){
    if(fs.existsSync(path.join(process.cwd(),'jsjiami.config.js'))){
        var config = require(path.join(process.cwd(),'jsjiami.config.js'));
    }else{
        console.error('没找到配置文件 jsjiami.config.js');
        process.exit(1);
    }
}else{
    var config = {
        files:[],
        output:path.join(process.cwd(),'dist'),
        option:{
            compact: true,
            controlFlowFlattening: true,
            controlFlowFlatteningThreshold: 0.75,
            deadCodeInjection: true,
            deadCodeInjectionThreshold: 0.5,
            debugProtection: true,
            debugProtectionInterval: true,
            disableConsoleOutput: true,
            stringArrayEncoding: ['rc4'],
            stringArrayRotate: true,
            stringArrayThreshold: 0.75,
            renameProperties: true,
            renamePropertiesMode: 'safe',
        }
    }
    let file = path.join(process.cwd(),argv[0]);
    config.files.push(file);
}
if(!fs.existsSync(config.output)){
    fs.mkdirSync(config.output);
}
config.files.map(v=>{
    if(fs.existsSync(v)){
        let code = fs.readFileSync(v).toString();
        let obfuscationResult = JavaScriptObfuscator.obfuscate(code,config.option);
        let ObfuscatedCode = obfuscationResult.getObfuscatedCode();
        fs.writeFileSync(path.join(config.output,path.basename(v)),ObfuscatedCode);
        
    }else{
        console.error(v,'要加密的文件不存在');
        process.exit(1);
    }
})